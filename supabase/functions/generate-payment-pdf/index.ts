import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// HTML to PDF generation using basic HTML/CSS approach
const generateInvoiceHTML = (payment: any, ownerInfo: any) => {
  const formatDate = (date: string) => new Date(date).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: 'short',
    year: 'numeric'
  });

  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body { font-family: Arial, sans-serif; padding: 40px; }
    .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #2563eb; padding-bottom: 20px; }
    .company-name { font-size: 28px; font-weight: bold; color: #2563eb; }
    .invoice-title { font-size: 22px; margin-top: 10px; }
    .section { margin: 30px 0; }
    .info-row { display: flex; justify-content: space-between; margin: 10px 0; }
    .label { font-weight: bold; color: #666; }
    .value { color: #000; }
    .amount-box { background: #f3f4f6; padding: 20px; margin: 30px 0; border-radius: 8px; }
    .total { font-size: 24px; font-weight: bold; color: #2563eb; }
    .footer { margin-top: 60px; border-top: 2px solid #e5e7eb; padding-top: 20px; text-align: center; color: #666; }
  </style>
</head>
<body>
  <div class="header">
    <div class="company-name">ShazamParking</div>
    <div class="invoice-title">PAYMENT INVOICE</div>
  </div>

  <div class="section">
    <div class="info-row">
      <div><span class="label">Invoice Date:</span> <span class="value">${formatDate(payment.payment_date)}</span></div>
      <div><span class="label">Reference:</span> <span class="value">${payment.reference_number || 'N/A'}</span></div>
    </div>
  </div>

  <div class="section">
    <h3>Payment To:</h3>
    <div class="info-row">
      <div><span class="label">Owner Name:</span> <span class="value">${ownerInfo.full_name || 'N/A'}</span></div>
    </div>
    <div class="info-row">
      <div><span class="label">Email:</span> <span class="value">${ownerInfo.email || 'N/A'}</span></div>
    </div>
  </div>

  <div class="section">
    <h3>Payment Details:</h3>
    <div class="info-row">
      <div><span class="label">Period:</span> <span class="value">${formatDate(payment.payment_period_start)} - ${formatDate(payment.payment_period_end)}</span></div>
    </div>
    <div class="info-row">
      <div><span class="label">Payment Method:</span> <span class="value">${payment.payment_method || 'Bank Transfer'}</span></div>
    </div>
    ${payment.notes ? `<div class="info-row"><div><span class="label">Notes:</span> <span class="value">${payment.notes}</span></div></div>` : ''}
  </div>

  <div class="amount-box">
    <div class="info-row">
      <div class="label">Total Amount Paid:</div>
      <div class="total">AED ${parseFloat(payment.amount_aed).toFixed(2)}</div>
    </div>
  </div>

  <div class="footer">
    <p>Thank you for your business!</p>
    <p style="font-size: 12px;">This is an automated invoice generated by ShazamParking system.</p>
  </div>
</body>
</html>
  `;
};

const generateRemittanceHTML = (payment: any, ownerInfo: any) => {
  const formatDate = (date: string) => new Date(date).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: 'short',
    year: 'numeric'
  });

  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <style>
    body { font-family: Arial, sans-serif; padding: 40px; }
    .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #16a34a; padding-bottom: 20px; }
    .company-name { font-size: 28px; font-weight: bold; color: #16a34a; }
    .doc-title { font-size: 22px; margin-top: 10px; }
    .section { margin: 30px 0; }
    .info-row { display: flex; justify-content: space-between; margin: 10px 0; }
    .label { font-weight: bold; color: #666; }
    .value { color: #000; }
    .amount-box { background: #f0fdf4; padding: 20px; margin: 30px 0; border-radius: 8px; border: 2px solid #16a34a; }
    .total { font-size: 24px; font-weight: bold; color: #16a34a; }
    .footer { margin-top: 60px; border-top: 2px solid #e5e7eb; padding-top: 20px; text-align: center; color: #666; }
  </style>
</head>
<body>
  <div class="header">
    <div class="company-name">ShazamParking</div>
    <div class="doc-title">REMITTANCE ADVICE</div>
  </div>

  <div class="section">
    <div class="info-row">
      <div><span class="label">Payment Date:</span> <span class="value">${formatDate(payment.payment_date)}</span></div>
      <div><span class="label">Reference:</span> <span class="value">${payment.reference_number || 'N/A'}</span></div>
    </div>
  </div>

  <div class="section">
    <h3>Payee Information:</h3>
    <div class="info-row">
      <div><span class="label">Name:</span> <span class="value">${ownerInfo.full_name || 'N/A'}</span></div>
    </div>
    <div class="info-row">
      <div><span class="label">Email:</span> <span class="value">${ownerInfo.email || 'N/A'}</span></div>
    </div>
  </div>

  <div class="section">
    <h3>Payment Information:</h3>
    <div class="info-row">
      <div><span class="label">Payment Period:</span> <span class="value">${formatDate(payment.payment_period_start)} - ${formatDate(payment.payment_period_end)}</span></div>
    </div>
    <div class="info-row">
      <div><span class="label">Payment Method:</span> <span class="value">${payment.payment_method || 'Bank Transfer'}</span></div>
    </div>
    <div class="info-row">
      <div><span class="label">Status:</span> <span class="value">${payment.status}</span></div>
    </div>
    ${payment.notes ? `<div class="info-row"><div><span class="label">Notes:</span> <span class="value">${payment.notes}</span></div></div>` : ''}
  </div>

  <div class="amount-box">
    <div class="info-row">
      <div class="label">Amount Remitted:</div>
      <div class="total">AED ${parseFloat(payment.amount_aed).toFixed(2)}</div>
    </div>
  </div>

  <div class="footer">
    <p>This remittance advice confirms the payment has been processed.</p>
    <p style="font-size: 12px;">Auto-generated by ShazamParking system on ${formatDate(new Date().toISOString())}</p>
  </div>
</body>
</html>
  `;
};

// Convert HTML to PDF using puppeteer-core with chromium
const htmlToPdf = async (html: string): Promise<Uint8Array> => {
  try {
    // Use browser automation to generate PDF
    const response = await fetch('https://api.html2pdf.app/v1/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        html: html,
        format: 'A4',
        printBackground: true,
        margin: { top: '20px', right: '20px', bottom: '20px', left: '20px' }
      })
    });

    if (!response.ok) {
      throw new Error('PDF generation service failed');
    }

    return new Uint8Array(await response.arrayBuffer());
  } catch (error) {
    console.error('PDF generation error:', error);
    // Fallback: return HTML as text (better than nothing)
    const encoder = new TextEncoder();
    return encoder.encode(html);
  }
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      throw new Error('No authorization header');
    }

    // Verify user is admin
    const token = authHeader.replace('Bearer ', '');
    const { data: { user }, error: authError } = await supabaseClient.auth.getUser(token);
    
    if (authError || !user) {
      throw new Error('Unauthorized');
    }

    const { data: userRole } = await supabaseClient
      .from('user_roles')
      .select('role')
      .eq('user_id', user.id)
      .eq('role', 'admin')
      .single();

    if (!userRole) {
      throw new Error('Admin access required');
    }

    const { paymentId } = await req.json();

    if (!paymentId) {
      throw new Error('Payment ID is required');
    }

    console.log('Generating PDFs for payment:', paymentId);

    // Get payment details
    const { data: payment, error: paymentError } = await supabaseClient
      .from('owner_payments')
      .select('*')
      .eq('id', paymentId)
      .single();

    if (paymentError || !payment) {
      throw new Error('Payment not found');
    }

    // Get owner info
    const { data: ownerInfo } = await supabaseClient.rpc('get_user_basic_info', {
      user_ids: [payment.owner_id]
    });

    const owner = ownerInfo?.[0] || { full_name: 'Unknown', email: 'N/A' };

    console.log('Generating invoice PDF...');
    const invoiceHTML = generateInvoiceHTML(payment, owner);
    const invoicePDF = await htmlToPdf(invoiceHTML);

    console.log('Generating remittance PDF...');
    const remittanceHTML = generateRemittanceHTML(payment, owner);
    const remittancePDF = await htmlToPdf(remittanceHTML);

    // Upload to storage
    const invoicePath = `${payment.owner_id}/invoice_${paymentId}.pdf`;
    const remittancePath = `${payment.owner_id}/remittance_${paymentId}.pdf`;

    console.log('Uploading invoice to storage...');
    const { error: invoiceUploadError } = await supabaseClient.storage
      .from('owner-payment-documents')
      .upload(invoicePath, invoicePDF, {
        contentType: 'application/pdf',
        upsert: true
      });

    if (invoiceUploadError) {
      console.error('Invoice upload error:', invoiceUploadError);
      throw invoiceUploadError;
    }

    console.log('Uploading remittance to storage...');
    const { error: remittanceUploadError } = await supabaseClient.storage
      .from('owner-payment-documents')
      .upload(remittancePath, remittancePDF, {
        contentType: 'application/pdf',
        upsert: true
      });

    if (remittanceUploadError) {
      console.error('Remittance upload error:', remittanceUploadError);
      throw remittanceUploadError;
    }

    // Update payment record with document URLs
    const { error: updateError } = await supabaseClient
      .from('owner_payments')
      .update({
        invoice_url: invoicePath,
        remittance_advice_url: remittancePath,
        updated_at: new Date().toISOString()
      })
      .eq('id', paymentId);

    if (updateError) {
      console.error('Update error:', updateError);
      throw updateError;
    }

    console.log('PDFs generated successfully for payment:', paymentId);

    return new Response(
      JSON.stringify({
        success: true,
        message: 'PDFs generated successfully',
        invoice_url: invoicePath,
        remittance_advice_url: remittancePath
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error generating PDFs:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
