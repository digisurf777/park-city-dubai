import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { DollarSign, Upload, Download, FileText, Search, Plus, Calendar, Loader2, Trash2 } from 'lucide-react';
import { toast } from 'sonner';
import { format } from 'date-fns';

interface OwnerPayment {
  id: string;
  owner_id: string;
  owner_name: string;
  owner_email: string;
  listing_id?: string;
  listing_title?: string;
  payment_date: string;
  amount_aed: number;
  payment_period_start: string;
  payment_period_end: string;
  payment_method: string;
  reference_number?: string;
  invoice_url?: string;
  remittance_advice_url?: string;
  notes?: string;
  status: string;
  booking_id?: string;
  booking_location?: string;
  booking_zone?: string;
  booking_start_time?: string;
  booking_end_time?: string;
}

interface OwnerBooking {
  booking_id: string;
  location: string;
  zone: string;
  start_time: string;
  end_time: string;
  cost_aed: number;
  status: string;
  listing_title: string;
}

interface Owner {
  id: string;
  full_name: string;
  email: string;
}

export const PaymentHistoryAdmin = () => {
  const [payments, setPayments] = useState<OwnerPayment[]>([]);
  const [loading, setLoading] = useState(true);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [uploadingDoc, setUploadingDoc] = useState<{ paymentId: string; type: 'invoice' | 'remittance' } | null>(null);
  const [owners, setOwners] = useState<Owner[]>([]);
  const [ownerBookings, setOwnerBookings] = useState<OwnerBooking[]>([]);
  const [loadingBookings, setLoadingBookings] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [autoGenerateDocs, setAutoGenerateDocs] = useState(true);
  const [isGeneratingPdfs, setIsGeneratingPdfs] = useState(false);
  const [downloadingDoc, setDownloadingDoc] = useState<{ paymentId: string; type: 'invoice' | 'remittance' } | null>(null);
  const [deletingPaymentId, setDeletingPaymentId] = useState<string | null>(null);

  // Form state
  const [selectedOwnerId, setSelectedOwnerId] = useState('');
  const [selectedBookingId, setSelectedBookingId] = useState('none');
  const [amount, setAmount] = useState('');
  const [periodStart, setPeriodStart] = useState('');
  const [periodEnd, setPeriodEnd] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('Bank Transfer');
  const [referenceNumber, setReferenceNumber] = useState('');
  const [notes, setNotes] = useState('');

  useEffect(() => {
    fetchPayments();
    fetchOwners();
  }, []);

  const fetchPayments = async () => {
    try {
      setLoading(true);
      const { data, error } = await supabase.rpc('get_owner_payment_history');
      if (error) throw error;
      setPayments(data || []);
    } catch (error: any) {
      console.error('Error fetching payments:', error);
      toast.error('Failed to load payment history');
    } finally {
      setLoading(false);
    }
  };

  const fetchOwners = async () => {
    try {
      // Step 1: Get unique owner_ids from listings that are visible to admins
      const { data: listings, error: listingsError } = await supabase
        .from('parking_listings')
        .select('owner_id')
        .in('status', ['approved', 'published'])
        .not('owner_id', 'is', null);

      if (listingsError) throw listingsError;

      const ownerIds = Array.from(
        new Set((listings || []).map((l: any) => l.owner_id).filter(Boolean))
      );

      if (ownerIds.length === 0) {
        setOwners([]);
        console.log('No owners found from listings');
        return;
      }

      // Step 2: Fetch basic info for those owners via secure RPC (admin only)
      const { data: ownersInfo, error: infoError } = await supabase.rpc(
        'get_user_basic_info',
        { user_ids: ownerIds }
      );

      if (infoError) throw infoError;

      const formattedOwners: Owner[] = (ownersInfo || []).map((u: any) => ({
        id: u.user_id,
        full_name: u.display_name || u.full_name || 'Unknown',
        email: u.email || ''
      }));

      // Sort by name for better UX
      formattedOwners.sort((a, b) => a.full_name.localeCompare(b.full_name));

      setOwners(formattedOwners);
      console.log('Loaded owners:', formattedOwners);
    } catch (error) {
      console.error('Error fetching owners:', error);
      toast.error('Failed to load owners');
      setOwners([]);
    }
  };

  const fetchOwnerBookings = async (ownerId: string) => {
    try {
      setLoadingBookings(true);
      const { data, error } = await supabase.rpc('get_owner_bookings_for_payment', {
        p_owner_id: ownerId
      });
      
      if (error) throw error;
      setOwnerBookings(data || []);
    } catch (error: any) {
      console.error('Error fetching owner bookings:', error);
      toast.error('Failed to load bookings for this owner');
      setOwnerBookings([]);
    } finally {
      setLoadingBookings(false);
    }
  };

  const handleCreatePayment = async () => {
    if (!selectedOwnerId || !amount || !periodStart || !periodEnd) {
      toast.error('Please fill in all required fields');
      return;
    }

    try {
      const { data: insertedPayment, error } = await supabase
        .from('owner_payments')
        .insert({
          owner_id: selectedOwnerId,
          booking_id: selectedBookingId === 'none' ? null : selectedBookingId,
          amount_aed: parseFloat(amount),
          payment_period_start: periodStart,
          payment_period_end: periodEnd,
          payment_method: paymentMethod,
          reference_number: referenceNumber,
          notes: notes,
          status: 'completed'
        })
        .select()
        .single();

      if (error) throw error;

      toast.success('Payment record created successfully');

      // Auto-generate PDFs if enabled
      if (autoGenerateDocs && insertedPayment) {
        setIsGeneratingPdfs(true);
        try {
          const { error: pdfError } = await supabase.functions.invoke('generate-payment-pdf', {
            body: { paymentId: insertedPayment.id }
          });

          if (pdfError) throw pdfError;
          
          toast.success("Invoice and remittance PDFs generated successfully");
        } catch (pdfError: any) {
          console.error('Error generating PDFs:', pdfError);
          toast.error("Payment created but PDF generation failed. You can upload documents manually.");
        } finally {
          setIsGeneratingPdfs(false);
        }
      }

      setCreateDialogOpen(false);
      resetForm();
      fetchPayments();
    } catch (error: any) {
      console.error('Error creating payment:', error);
      toast.error('Failed to create payment record');
    }
  };

  const handleUploadDocument = async (paymentId: string, documentType: 'invoice' | 'remittance', file: File) => {
    if (!file || file.type !== 'application/pdf') {
      toast.error('Please select a PDF file');
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      toast.error('File size must be less than 5MB');
      return;
    }

    try {
      setUploadingDoc({ paymentId, type: documentType });

      // Convert file to base64
      const reader = new FileReader();
      reader.readAsDataURL(file);
      
      reader.onload = async () => {
        const base64 = reader.result?.toString().split(',')[1];
        if (!base64) throw new Error('Failed to read file');

        const { error } = await supabase.functions.invoke('upload-payment-document', {
          body: {
            paymentId,
            documentType,
            fileName: file.name,
            fileData: base64
          }
        });

        if (error) throw error;

        toast.success(`${documentType === 'invoice' ? 'Invoice' : 'Remittance advice'} uploaded successfully`);
        fetchPayments();
      };

      reader.onerror = () => {
        throw new Error('Failed to read file');
      };
    } catch (error: any) {
      console.error('Error uploading document:', error);
      toast.error('Failed to upload document');
    } finally {
      setUploadingDoc(null);
    }
  };

  const handleDownloadDocument = async (paymentId: string, documentType: 'invoice' | 'remittance') => {
    const fetchAndValidate = async (signedUrl: string) => {
      const resp = await fetch(signedUrl);
      if (!resp.ok) return null;
      const buf = await resp.arrayBuffer();
      const bytes = new Uint8Array(buf).slice(0, 4);
      const isPDF = bytes[0] === 0x25 && bytes[1] === 0x50 && bytes[2] === 0x44 && bytes[3] === 0x46; // %PDF
      return isPDF ? buf : null;
    };

    try {
      setDownloadingDoc({ paymentId, type: documentType });

      // Always regenerate to ensure latest name/email/logo before signing URL
      await supabase.functions.invoke('generate-payment-pdf', { body: { paymentId } });

      const { data, error } = await supabase.functions.invoke('generate-payment-document-url', {
        body: { paymentId, documentType }
      });

      if (error) throw error;

      let buffer: ArrayBuffer | null = null;
      if (data?.url) {
        buffer = await fetchAndValidate(data.url);
      }

      if (!buffer) {
        toast.message('Fixing documentâ€¦', { description: 'Regenerating PDF and retrying' });
        const { error: genError } = await supabase.functions.invoke('generate-payment-pdf', { body: { paymentId } });
        if (genError) throw genError;
        const { data: retryData, error: retryError } = await supabase.functions.invoke('generate-payment-document-url', {
          body: { paymentId, documentType }
        });
        if (retryError || !retryData?.url) throw retryError || new Error('No URL after regenerate');
        buffer = await fetchAndValidate(retryData.url);
        if (!buffer) throw new Error('Document still invalid after regenerate');
      }

      const blob = new Blob([buffer], { type: 'application/pdf' });
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${documentType}_${paymentId}.pdf`;
      link.click();
      window.URL.revokeObjectURL(url);
      toast.success(`${documentType === 'invoice' ? 'Invoice' : 'Remittance advice'} downloaded`);
    } catch (error: any) {
      console.error('Error downloading document:', error);
      toast.error('Failed to download document');
    } finally {
      setDownloadingDoc(null);
    }
  };

  const handleDeletePayment = async (paymentId: string) => {
    const confirmed = window.confirm('Delete this payment and its documents? This cannot be undone.');
    if (!confirmed) return;
    try {
      setDeletingPaymentId(paymentId);
      const { error } = await supabase.functions.invoke('delete-owner-payment', {
        body: { paymentId }
      });
      if (error) throw error;
      toast.success('Payment deleted');
      setPayments(prev => prev.filter(p => p.id !== paymentId));
    } catch (e: any) {
      console.error('Delete error:', e);
      toast.error('Failed to delete payment');
    } finally {
      setDeletingPaymentId(null);
    }
  };

  const resetForm = () => {
    setSelectedOwnerId('');
    setSelectedBookingId('none');
    setAmount('');
    setPeriodStart('');
    setPeriodEnd('');
    setPaymentMethod('Bank Transfer');
    setReferenceNumber('');
    setNotes('');
    setOwnerBookings([]);
  };

  // Watch for owner selection to load their bookings
  useEffect(() => {
    if (selectedOwnerId && createDialogOpen) {
      fetchOwnerBookings(selectedOwnerId);
    } else {
      setOwnerBookings([]);
      setSelectedBookingId('none');
    }
  }, [selectedOwnerId, createDialogOpen]);

  const filteredPayments = payments.filter(p =>
    p.owner_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    p.reference_number?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (loading) {
    return <div className="flex justify-center p-8">Loading...</div>;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-2">
          <DollarSign className="h-6 w-6" />
          <h2 className="text-2xl font-bold">Payment History</h2>
        </div>
        <Button onClick={() => setCreateDialogOpen(true)}>
          <Plus className="h-4 w-4 mr-2" />
          New Payment
        </Button>
      </div>

      <div className="flex gap-4 items-center">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search by owner name or reference..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
      </div>

      <div className="grid gap-4">
        {filteredPayments.map((payment) => (
          <Card key={payment.id}>
            <CardHeader>
              <div className="flex justify-between items-start">
                <div>
                  <CardTitle className="text-lg">{payment.owner_name}</CardTitle>
                  <p className="text-sm text-muted-foreground">{payment.owner_email}</p>
                </div>
                <div className="flex items-center gap-2">
                  <Badge>{payment.status}</Badge>
                  <Button
                    variant="destructive"
                    size="icon"
                    onClick={() => handleDeletePayment(payment.id)}
                    disabled={deletingPaymentId === payment.id}
                    title="Delete payment"
                  >
                    {deletingPaymentId === payment.id ? (
                      <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                      <Trash2 className="h-4 w-4" />
                    )}
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <Label className="text-muted-foreground">Amount</Label>
                  <p className="font-semibold">AED {payment.amount_aed.toFixed(2)}</p>
                </div>
                <div>
                  <Label className="text-muted-foreground">Payment Date</Label>
                  <p>{format(new Date(payment.payment_date), 'PPP')}</p>
                </div>
                <div>
                  <Label className="text-muted-foreground">Period</Label>
                  <p>
                    {format(new Date(payment.payment_period_start), 'PP')} - {format(new Date(payment.payment_period_end), 'PP')}
                  </p>
                </div>
                <div>
                  <Label className="text-muted-foreground">Reference</Label>
                  <p>{payment.reference_number || 'N/A'}</p>
                </div>
              </div>

              {payment.booking_id && (
                <div className="pt-2 border-t">
                  <Label className="text-muted-foreground text-sm">Linked Booking</Label>
                  <div className="mt-2 p-3 bg-blue-50 dark:bg-blue-950/30 rounded-md space-y-1 border border-blue-200 dark:border-blue-800">
                    <p className="text-sm font-medium">{payment.booking_location}</p>
                    {payment.booking_zone && (
                      <p className="text-xs text-muted-foreground">Zone: {payment.booking_zone}</p>
                    )}
                    {payment.booking_start_time && payment.booking_end_time && (
                      <p className="text-xs text-muted-foreground">
                        Rental: {format(new Date(payment.booking_start_time), 'PP')} - {format(new Date(payment.booking_end_time), 'PP')}
                      </p>
                    )}
                  </div>
                </div>
              )}

              <div className="flex gap-2 pt-2 border-t">
                <div className="flex-1 space-y-2">
                  <Label className="text-sm">Invoice</Label>
                  <div className="flex gap-2">
                    {payment.invoice_url && (
                      <Button
                        variant="outline"
                        size="sm"
                        className="flex-1"
                        onClick={() => handleDownloadDocument(payment.id, 'invoice')}
                        disabled={downloadingDoc?.paymentId === payment.id && downloadingDoc.type === 'invoice'}
                      >
                        {downloadingDoc?.paymentId === payment.id && downloadingDoc.type === 'invoice' ? (
                          <>
                            <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                            Loading...
                          </>
                        ) : (
                          <>
                            <Download className="h-3 w-3 mr-1" />
                            Download
                          </>
                        )}
                      </Button>
                    )}
                    <div className="relative flex-1">
                      <Input
                        type="file"
                        accept="application/pdf"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) handleUploadDocument(payment.id, 'invoice', file);
                        }}
                        disabled={uploadingDoc?.paymentId === payment.id && uploadingDoc.type === 'invoice'}
                        className="cursor-pointer text-xs h-9"
                      />
                      {uploadingDoc?.paymentId === payment.id && uploadingDoc.type === 'invoice' && (
                        <span className="text-xs text-muted-foreground absolute -bottom-5 left-0">Uploading...</span>
                      )}
                    </div>
                  </div>
                </div>
                <div className="flex-1 space-y-2">
                  <Label className="text-sm">Remittance Advice</Label>
                  <div className="flex gap-2">
                    {payment.remittance_advice_url && (
                      <Button
                        variant="outline"
                        size="sm"
                        className="flex-1"
                        onClick={() => handleDownloadDocument(payment.id, 'remittance')}
                        disabled={downloadingDoc?.paymentId === payment.id && downloadingDoc.type === 'remittance'}
                      >
                        {downloadingDoc?.paymentId === payment.id && downloadingDoc.type === 'remittance' ? (
                          <>
                            <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                            Loading...
                          </>
                        ) : (
                          <>
                            <Download className="h-3 w-3 mr-1" />
                            Download
                          </>
                        )}
                      </Button>
                    )}
                    <div className="relative flex-1">
                      <Input
                        type="file"
                        accept="application/pdf"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) handleUploadDocument(payment.id, 'remittance', file);
                        }}
                        disabled={uploadingDoc?.paymentId === payment.id && uploadingDoc.type === 'remittance'}
                        className="cursor-pointer text-xs h-9"
                      />
                      {uploadingDoc?.paymentId === payment.id && uploadingDoc.type === 'remittance' && (
                        <span className="text-xs text-muted-foreground absolute -bottom-5 left-0">Uploading...</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Create Payment Record</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <Label>Owner *</Label>
              <Select value={selectedOwnerId} onValueChange={setSelectedOwnerId}>
                <SelectTrigger>
                  <SelectValue placeholder="Select owner" />
                </SelectTrigger>
                <SelectContent>
                  {owners.length === 0 ? (
                    <div className="p-2 text-sm text-muted-foreground">No owners found</div>
                  ) : (
                    owners.map((owner) => (
                      <SelectItem key={owner.id} value={owner.id}>
                        {owner.full_name} ({owner.email})
                      </SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>Link to Booking (Optional)</Label>
              <Select 
                value={selectedBookingId} 
                onValueChange={setSelectedBookingId}
                disabled={!selectedOwnerId || loadingBookings}
              >
                <SelectTrigger>
                  <SelectValue placeholder={
                    !selectedOwnerId ? "Select owner first" : 
                    loadingBookings ? "Loading bookings..." : 
                    ownerBookings.length === 0 ? "No bookings found" :
                    "Select a booking (optional)"
                  } />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">No booking (manual payment)</SelectItem>
                  {ownerBookings.map((booking) => (
                    <SelectItem key={booking.booking_id} value={booking.booking_id}>
                      {booking.listing_title || booking.location} - {format(new Date(booking.start_time), 'PP')} to {format(new Date(booking.end_time), 'PP')} (AED {booking.cost_aed})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {selectedBookingId !== 'none' && ownerBookings.length > 0 && (
                <p className="text-xs text-muted-foreground mt-1">
                  Invoice will include booking details for this rental
                </p>
              )}
            </div>

            <div>
              <Label>Amount (AED) *</Label>
              <Input
                type="number"
                step="0.01"
                min="0"
                value={amount}
                onChange={(e) => setAmount(e.target.value)}
                placeholder="Enter amount in AED"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label>Period Start *</Label>
                <Input
                  type="date"
                  value={periodStart}
                  onChange={(e) => setPeriodStart(e.target.value)}
                />
              </div>
              <div>
                <Label>Period End *</Label>
                <Input
                  type="date"
                  value={periodEnd}
                  onChange={(e) => setPeriodEnd(e.target.value)}
                />
              </div>
            </div>

            <div>
              <Label>Reference Number</Label>
              <Input
                value={referenceNumber}
                onChange={(e) => setReferenceNumber(e.target.value)}
                placeholder="Optional"
              />
            </div>

            <div>
              <Label>Notes</Label>
              <Input
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                placeholder="Optional notes"
              />
            </div>

            <div className="flex items-center space-x-2 pt-4 border-t">
              <input
                type="checkbox"
                id="autoGenerateDocs"
                checked={autoGenerateDocs}
                onChange={(e) => setAutoGenerateDocs(e.target.checked)}
                className="h-4 w-4 rounded border-gray-300 cursor-pointer"
              />
              <Label htmlFor="autoGenerateDocs" className="font-normal cursor-pointer">
                Auto-generate invoice & remittance PDFs
              </Label>
            </div>

            <div className="flex gap-2 justify-end pt-4">
              <Button variant="outline" onClick={() => setCreateDialogOpen(false)} disabled={isGeneratingPdfs}>
                Cancel
              </Button>
              <Button onClick={handleCreatePayment} disabled={isGeneratingPdfs}>
                {isGeneratingPdfs ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating PDFs...
                  </>
                ) : (
                  'Create Payment'
                )}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};
